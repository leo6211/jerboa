name: Pull Request Check

on:
  pull_request:
    branches: [ main, develop ]

jobs:
  pr-check:
    name: PR Quality Gate
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # Fetch full history for better diff analysis
        fetch-depth: 0

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Run formatting check
      run: ./gradlew lintKotlin

    - name: Build debug APK to verify compilation
      run: ./gradlew assembleDebug

    - name: Check for changes in critical files
      run: |
        git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -E "(build\.gradle|gradle\.properties|proguard)" && echo "Critical build files changed" || echo "No critical files changed"

    - name: Comment PR with build status
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '❌ Build failed! Please check the logs and fix the issues before merging.'
          })

    - name: Comment PR with success
      if: success()
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '✅ All checks passed! This PR is ready for review.'
          })